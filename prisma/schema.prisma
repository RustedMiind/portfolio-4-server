// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @unique() @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique()
  hash String
  firstName String?
  lastName String?
  role Role? @relation(fields: [roleId], references: [id])
  roleId String?
  profileImage String?
  orders Order[]
  createdProducts Product[]
  OrdersStatuses OrderStatus[]
}


model Permission {
  id String @id @unique() @default(uuid())
  name String @unique
  showName String? @unique
  roles Role[]
}

model Role {
  id String @id @unique() @default(uuid())
  name String @unique
  permissions Permission[]
  users User[]
}

model KeyValue{
  key String @id @unique()
  value String
}

model Product{
  id String @id @unique() @default(uuid())
  name String
  description String
  price Float
  priceAfterDiscount Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String
  createdBy User @relation(fields: [createdById],references: [id])
  images ProductImage[]
  categories         ProductCategory[] @relation("ProductCategories")
}
model ProductCategory {
  id       String     @id @unique @default(uuid())
  name     String
  products Product[]  @relation("ProductCategories")
}
model ProductImage{
  id String @id @unique() @default(uuid())
  imageUrl String
  productId String
  product Product @relation(fields: [productId],references: [id])
}
model Order {
  id          String         @id @unique @default(uuid())
  buyerId     String
  buyer       User           @relation(fields: [buyerId], references: [id])
  orderedAt   DateTime       @default(now())
  shippingFees Int           @default(0)
  price       Int
  orderItems  OrderItem[]
  statuses    OrderStatus[]  // One-to-many relation
}
model OrderItem{
  id String @id @unique() @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  price Int
  count Int @default(1)
}
model OrderStatus {
  id           String           @id @unique @default(uuid())
  status       OrderStatusEnum
  note         String?
  timestamp    DateTime         @default(now()) // Time when this status was applied
  orderId      String
  order        Order            @relation(fields: [orderId], references: [id])
  submittedById String
  submittedBy  User             @relation(fields: [submittedById], references: [id])
}
// Enum for order statuses
enum OrderStatusEnum {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
  REFUSED
  DONE
}


model Mails {
  id String @id @unique() @default(uuid())
  createdAt DateTime @default(now())
  sender_name String
  sender_email String
  org_name String?
  subject String
  body String
}